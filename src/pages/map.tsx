import React, { useEffect, useRef, useState } from "react";
import GoogleMapReact from "google-map-react";
import { BiSearch } from "react-icons/bi";
import Head from "next/head";
import "react-datalist-input/dist/styles.css";
import { useRouter } from "next/router";

declare global {
  interface Window {
    initMap?: () => void;
  }
}
const Location = () => {
  const apiKey = "AIzaSyDKDVVNL5FeC6oEKMdVMascV7WDuglvu8c";

  const [query, setQuery] = useState("");
  const router = useRouter();

  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };
  const autoCompleteRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const [selectedLocation, setSelectedLocation] = useState("");

  useEffect(() => {
    window.initMap = () => {
      console.log("Google Maps API loaded");
    };
    return () => {
      delete window.initMap;
    };
  }, [apiKey]);

  useEffect(() => {
    if (window.google && window.google.maps && window.google.maps.places) {
      const options = {
        componentRestrictions: { country: "ng" },
        fields: ["address_components", "geometry", "icon", "name"],
        types: ["establishment"],
      };
      const places = new window.google.maps.places.Autocomplete(
        inputRef.current as HTMLInputElement,
        options
      );
      places.addListener("place_changed", () => {
        const place = places.getPlace();
        if (place) {
          const location = place.name + " , " + place.address_components;
          const latitude = place.geometry?.location?.lat();
          const longitude = place.geometry?.location?.lng();
          setSelectedLocation(location);
          localStorage.setItem("selectedLocation", location);
          localStorage.setItem(
            "lat_and_lng",
            JSON.stringify({
              latitude,
              longitude,
            })
          );
          setTimeout(() => {
            router.push("/create_address_page");
          }, 1500);
        }
      });
    }
  }, [router]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
          crossOrigin="anonymous"
        />
        <link
          rel="stylesheet"
          href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"
          integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm"
          crossOrigin="anonymous"
        />
        <script
          src={`https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initMap`}
          async
        />
      </Head>

      <>
        <div
        // style={{ position: "fixed", top: 0, left: 0, bottom: 0, right: 0 }}
        >
          <GoogleMapReact
            // bootstrapURLKeys={{ key: apiKey }}
            defaultCenter={{ lat: 37.7749, lng: -122.4194 }}
            defaultZoom={12}
          />

          <form
            onSubmit={handleSearch}
            style={{ position: "absolute", top: 20, left: 20, zIndex: 1 }}
            className="input-search"
          >
            <div ref={autoCompleteRef}>
              <input
                type="text"
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Search to find address"
                ref={inputRef}
              />
            </div>

            <span style={{ marginLeft: "-36px", fontSize: "21px" }}>
              <BiSearch />
            </span>
          </form>
        </div>
      </>
    </>
  );
};

export default Location;

//  <script
// src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
// integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
// crossOrigin="anonymous"
// />
//
// <link
// href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300&display=swap"
// rel="stylesheet"
// ></link>

// {/*
//   <button type="submit" className="skip-button">
//     Skip
//   </button> */}
